---
layout: book
title: The Practice of Programming
permalink: /rmit/books/practice-of-programming/
book_title: The Practice of Programming
book_authors: Brian W. Kernighan, Rob Pike
book_publisher: Addison-Wesley, 1999
---

h2. Chapter 1

Code should be clear and simple - straightforward logic, natural expression, conventional language use, meaningful names, neat formatting, helpful comments - and it should avoid clever tricks and unusual constructions. Consistency is important because others will find it easier to read your code, and you theirs, if you all stick to the same style.

Well-written programs are based on interrelated principles:

* _simplicity_: keep programs short and manageable
* _clarity_: ensure programs are easy to understand for people as well as machines
* _generality_: programs work well in a broad range of situations and adapt well to new situations as they arise
* _automation_: programs let the machine work for us, freeing us from mundane tasks

h3. Names

h4. Use descriptive names for globals, short names for locals.

Global variables are in general a bad thing, but in programming languages that allow them such variables can appear anywhere so they need names long enough and descriptive enough to remind the reader of their meaning.

Global functions, classes and strucutures should also have descriptive names that suggest their role in the program.

Local variables, should have short names, and in particular, local variables that follow a convention can be very short.

Naming conventions make it easier to understand your own code, as well as code written by others. They also make it easier to invent new names as the code is being written.

h4. Be consistent.

Give related things related anmes that show their relationship and highlight their difference.

h4. Use active names for functions.

Function names should be based on active verbs, generally followed by nouns.

Functions that return a boolean value should be named so that the return type is unambiguous.

h4. Be accurate.

A name not only labels, it conveys information to the reader. A misleading name can result in mystifying bugs.

h3. Expressions and Statements

h4. Indent to show structure.

A consistent indentation style is the lowest-energy way to make a program's structure self-evident.

h4. Use the natural form for expressions.

Write expressions as you might speak them aloud. Conditional expressions that include negations are always hard to understand:

```
if (!(block_id < actblks) || !(block_id >= unblocks))
```

Turn the relations around to express a postive test:

```
if ((block_id >= actblks) || (block_id < unblocks))
```

h4. Parenthesize to resovle ambiguity.

Parentheses specify grouping and can be used to make the intent clear even when they are not required.

When mixing unrelated operators it is a good idea to parenthesize, particularly where precendence is a problem in stating accurately.

h4. Break up complex expresssions.

h4. Be clear.

h4. Be care with side effects.








